@model HazelClinic3.Models.Event

@{
    ViewBag.Title = "Schedule Event";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewBag.Title</title>
    <link href="~/Content/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background: url('https://images.pexels.com/photos/6001546/pexels-photo-6001546.jpeg') no-repeat center center fixed;
            background-size: cover;
            color: #003366;
            position: relative;
            min-height: 100vh;
            margin: 0;
        }

        .translucent-form-container {
            background-color: rgba(255, 255, 255, 0.8);
            border-radius: 10px;
            padding: 30px;
            margin: 20px auto;
            max-width: 800px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }

        .form-horizontal .form-group {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
        }

        .form-horizontal .control-label {
            flex: 1;
            text-align: left;
        }

        .form-horizontal .col-md-10 {
            flex: 2;
        }

        .btn-default {
            background-color: white;
            color: #003366;
            border: none;
        }

        .btn-dashboard {
            background-color: #003366;
            color: white;
            border: none;
            padding: 10px 20px;
            text-decoration: none;
            font-size: 16px;
            border-radius: 5px;
            position: absolute;
            bottom: 60px;
            left: 20px;
        }

        #suggestions {
            border: 1px solid #ccc;
            background: white;
            max-height: 200px;
            overflow-y: auto;
            position: absolute;
            z-index: 1000;
            width: calc(100% - 22px);
        }

            #suggestions div {
                padding: 8px;
                cursor: pointer;
            }

                #suggestions div:hover {
                    background-color: #ddd;
                }
    </style>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css" rel="stylesheet" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css" rel="stylesheet" />
</head>
<body>
    <a href="@Url.Action("AdminLog", "Users2")" class="btn-dashboard">Admin Dashboard</a>

    <div class="translucent-form-container">
        <h2>Create Event Below:</h2>
        @using (Html.BeginForm("Create", "Events", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                <div class="form-group">
                    @Html.LabelFor(model => model.EventName, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EventName, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EventName, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EventDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EventDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                        @Html.ValidationMessageFor(model => model.EventDate, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EventTime, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EventTime, new { htmlAttributes = new { @class = "form-control timepicker" } })
                        @Html.ValidationMessageFor(model => model.EventTime, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.LimitOfAttendees, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.LimitOfAttendees, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.LimitOfAttendees, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EventPrice, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EventPrice, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.EventPrice, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.ArePetsAllowed, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <div class="radio">
                            <label>
                                @Html.RadioButtonFor(model => model.ArePetsAllowed, true) Yes
                            </label>
                        </div>
                        <div class="radio">
                            <label>
                                @Html.RadioButtonFor(model => model.ArePetsAllowed, false) No
                            </label>
                        </div>
                        @Html.ValidationMessageFor(model => model.ArePetsAllowed, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.EventLocation, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.EventLocation, new { htmlAttributes = new { @class = "form-control", @id = "eventLocation" } })
                        <div id="suggestions"></div>
                        @Html.ValidationMessageFor(model => model.EventLocation, "", new { @class = "text-danger", @id = "eventLocationError" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.Label("Image", htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        <input type="file" name="image" class="form-control" />
                    </div>
                </div>

                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
            </div>
        }
    </div>

    @section Scripts {
        @Scripts.Render("~/bundles/jqueryval")
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"></script>
        <script>
            $(function () {
                $(".datepicker").datepicker({
                    dateFormat: "yy-mm-dd",
                    minDate: 0
                });

                $(".timepicker").timepicker({
                    timeFormat: 'HH:mm:ss',
                    interval: 60,
                    minTime: '08:00:00',
                    maxTime: '19:00:00',
                    defaultTime: '08:00:00',
                    startTime: '08:00:00',
                    dynamic: false,
                    dropdown: true,
                    scrollbar: true
                });

                $(document).ready(function () {
                    var input = document.getElementById('eventLocation');
                    var suggestionsDiv = document.getElementById('suggestions');

                    input.addEventListener('input', function () {
                        var value = this.value;
                        if (value.length > 3) {
                            $.ajax({
                                url: `https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(value)}`,
                                type: 'GET',
                                headers: {
                                    'User-Agent': 'SPCADURBAN/1.0 (spcadurbanza@gmail.com)'
                                },
                                success: function (data) {
                                    suggestionsDiv.innerHTML = '';
                                    if (data.length > 0) {
                                        data.forEach(function (result) {
                                            var div = document.createElement('div');
                                            div.textContent = result.display_name;
                                            div.dataset.lat = result.lat;
                                            div.dataset.lon = result.lon;
                                            div.addEventListener('click', function () {
                                                input.value = result.display_name;
                                                suggestionsDiv.innerHTML = '';
                                            });
                                            suggestionsDiv.appendChild(div);
                                        });
                                    }
                                },
                                error: function (xhr, status, error) {
                                    console.error('Error fetching data:', error);
                                }
                            });
                        } else {
                            suggestionsDiv.innerHTML = '';
                        }
                    });

                    document.addEventListener('click', function (event) {
                        if (!suggestionsDiv.contains(event.target) && event.target !== input) {
                            suggestionsDiv.innerHTML = '';
                        }
                    });
                });
            });
        </script>
    }
</body>
</html>
